import { GoogleGenAI, Type, GenerateContentResponse, Part } from "@google/genai";
import { WorkInfo, MultiPlatformContent, GenerationTasks } from "../types";

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

const reviewSchema = {
  type: Type.OBJECT,
  properties: {
    metaTitle: { type: Type.STRING, description: 'Meta Title t·ªëi ∆∞u SEO (t·ªëi ƒëa 60 k√Ω t·ª±), ch·ª©a t·ª´ kh√≥a ch√≠nh.' },
    metaDescription: { type: Type.STRING, description: 'Meta Description h·∫•p d·∫´n (120-155 k√Ω t·ª±), ch·ª©a t·ª´ kh√≥a ch√≠nh.' },
    altText: { type: Type.STRING, description: 'VƒÉn b·∫£n Alt cho ·∫£nh b√¨a/minh h·ªça, theo m·∫´u "B√¨a [T√™n t√°c ph·∫©m]".' },
    quotes: { type: Type.ARRAY, items: { type: Type.STRING }, description: '2-3 tr√≠ch d·∫´n hay v√† ƒë·∫Øt gi√° nh·∫•t trong t√°c ph·∫©m.' },
    reviewContent: { type: Type.STRING, description: 'N·ªôi dung b√†i review ho√†n ch·ªânh (kho·∫£ng 900-1200 t·ª´) ƒë·ªãnh d·∫°ng HTML. B√†i vi·∫øt ph·∫£i c√≥ c·∫•u tr√∫c s√©mantic v·ªõi th·∫ª h1, h2, h3, ul, li, p, strong, em, blockquote. Ph·∫£i c√≥ c√°c ph·∫ßn: M·ªü b√†i, Gi·ªõi thi·ªáu/T√≥m t·∫Øt n·ªôi dung, ƒêi·ªÉm n·ªïi b·∫≠t (c√≥ th·ªÉ ph√¢n t√≠ch c·∫£ C·ªët truy·ªán, Nh√¢n v·∫≠t, v√† N√©t v·∫Ω n·∫øu l√† truy·ªán tranh), ƒê√°nh gi√° chi ti·∫øt, ƒê·ªëi t∆∞·ª£ng ph√π h·ª£p, v√† K·∫øt lu·∫≠n.'},
  },
  required: ['metaTitle', 'metaDescription', 'altText', 'quotes', 'reviewContent']
};

const shortVideoScriptSchema = {
    type: Type.OBJECT,
    properties: {
        hook: { type: Type.STRING, description: "C√¢u hook d√†i 1 c√¢u, c·ª±c k·ª≥ g√¢y t√≤ m√≤ trong 3 gi√¢y ƒë·∫ßu ti√™n." },
        scenes: { 
            type: Type.ARRAY, 
            items: {
                type: Type.OBJECT,
                properties: {
                    scene: { type: Type.NUMBER, description: "S·ªë th·ª© t·ª± c·∫£nh" },
                    visual: { type: Type.STRING, description: "M√¥ t·∫£ ng·∫Øn g·ªçn h√¨nh ·∫£nh ho·∫∑c video cho c·∫£nh n√†y." },
                    script: { type: Type.STRING, description: "L·ªùi tho·∫°i ho·∫∑c vƒÉn b·∫£n hi·ªÉn th·ªã tr√™n m√†n h√¨nh cho c·∫£nh n√†y." }
                },
                required: ['scene', 'visual', 'script']
            },
            description: "K·ªãch b·∫£n chi ti·∫øt g·ªìm 3-5 c·∫£nh."
        },
        cta: { type: Type.STRING, description: "L·ªùi k√™u g·ªçi h√†nh ƒë·ªông ng·∫Øn g·ªçn, m·∫°nh m·∫Ω ·ªü cu·ªëi video." }
    },
    required: ['hook', 'scenes', 'cta']
};

const longVideoScriptSchema = {
    type: Type.OBJECT,
    properties: {
        title: { type: Type.STRING, description: "Ti√™u ƒë·ªÅ video Youtube h·∫•p d·∫´n, chu·∫©n SEO." },
        intro: { type: Type.STRING, description: "ƒêo·∫°n m·ªü ƒë·∫ßu video (kho·∫£ng 150 t·ª´), gi·ªõi thi·ªáu t√°c ph·∫©m v√† kh∆°i g·ª£i s·ª± t√≤ m√≤." },
        body: { type: Type.STRING, description: "N·ªôi dung ch√≠nh c·ªßa video (d·∫°ng vƒÉn k·ªÉ chuy·ªán, kho·∫£ng 800-1000 t·ª´), t√≥m t·∫Øt v√† ph√¢n t√≠ch c√°c √Ω ch√≠nh c·ªßa t√°c ph·∫©m m·ªôt c√°ch s√¢u s·∫Øc." },
        outro: { type: Type.STRING, description: "ƒêo·∫°n k·∫øt th√∫c video (kho·∫£ng 150 t·ª´), t√≥m l·∫°i gi√° tr·ªã t√°c ph·∫©m v√† k√™u g·ªçi ng∆∞·ªùi xem like, share, subscribe." }
    },
    required: ['title', 'intro', 'body', 'outro']
};


export const generateContent = async (workInfo: WorkInfo, tasks: GenerationTasks): Promise<MultiPlatformContent> => {
    const { title, author, genre, mainKeyword, ebookLink, affiliateLink, fileContent, coverImage, outputLanguage } = workInfo;

    let prompt = `L√† m·ªôt chuy√™n gia s√°ng t·∫°o n·ªôi dung ƒëa n·ªÅn t·∫£ng, chuy√™n gia SEO v√† reviewer chuy√™n nghi·ªáp v·ªÅ s√°ch, truy·ªán tranh (comics, manga), v√† ti·ªÉu thuy·∫øt ƒë·ªì h·ªça, h√£y t·∫°o ra c√°c s·∫£n ph·∫©m n·ªôi dung d·ª±a tr√™n th√¥ng tin t√°c ph·∫©m ƒë∆∞·ª£c cung c·∫•p.
    **Ng√¥n ng·ªØ ƒë·∫ßu ra:** Vi·∫øt to√†n b·ªô n·ªôi dung b·∫±ng ti·∫øng ${outputLanguage}.
    
    **Th√¥ng tin t√°c ph·∫©m:**
    - T√™n t√°c ph·∫©m: ${title}
    - T√°c gi·∫£/H·ªça sƒ©: ${author}
    - Th·ªÉ lo·∫°i: ${genre}
    - T·ª´ kh√≥a ch√≠nh: ${mainKeyword}
    
    **N·ªôi dung/T√≥m t·∫Øt t√°c ph·∫©m:**
    ${fileContent}

    **Y√äU C·∫¶U N·ªòI DUNG C·∫¶N T·∫†O:**
    `;

    const masterSchema: { type: Type, properties: any, required: string[] } = {
        type: Type.OBJECT,
        properties: {},
        required: []
    };

    if (tasks.review) {
        prompt += `
    **1. B√ÄI REVIEW (CHO BLOG/WEBSITE):**
        - **Y√™u c·∫ßu:** Vi·∫øt m·ªôt b√†i review c·ª±c k·ª≥ h·∫•p d·∫´n, chu·∫©n SEO, d√†i 900-1200 t·ª´, ƒë·ªãnh d·∫°ng HTML. N·∫øu ƒë√¢y l√† truy·ªán tranh, h√£y ch√∫ √Ω nh·∫≠n x√©t c·∫£ v·ªÅ ph·∫ßn h√¨nh ·∫£nh, n√©t v·∫Ω, v√† b·ªë c·ª•c khung truy·ªán.
        - **C·∫•u tr√∫c:**
            - **Ti√™u ƒë·ªÅ ch√≠nh (<h1>):** Th·∫≠t l√¥i cu·ªën v√† n·ªïi b·∫≠t. V√≠ d·ª•: "Review '${title}': M·ªôt T√°c Ph·∫©m Kh√¥ng Th·ªÉ B·ªè L·ª°".
            - **Placeholder ·∫£nh b√¨a:** Ngay sau ƒëo·∫°n gi·ªõi thi·ªáu ƒë·∫ßu ti√™n, ch√®n ch√≠nh x√°c chu·ªói: \`[COVER_IMAGE_PLACEHOLDER]\`.
            - **Ti√™u ƒë·ªÅ m·ª•c (<h2>):** S·ª≠ d·ª•ng c√°c th·∫ª <h2> v·ªõi class="text-2xl font-bold mt-8 mb-4 border-b-2 border-indigo-200 pb-2" v√† c√≥ emoji, bao g·ªìm c√°c m·ª•c: üìñ Gi·ªõi thi·ªáu, ‚ú® Nh·ªØng ƒëi·ªÉm s√°ng gi√° nh·∫•t, üéØ T√°c ph·∫©m n√†y d√†nh cho ai?, ‚≠ê ƒê√°nh gi√° chi ti·∫øt, üí¨ L·ªùi k·∫øt.
        - **Alt Text:** T·∫°o alt text cho ·∫£nh b√¨a theo m·∫´u "B√¨a ${title}".
        - **Tr√≠ch d·∫´n:** Tr√≠ch xu·∫•t 2-3 c√¢u hay nh·∫•t v√†o th·∫ª <blockquote>.
    `;
        masterSchema.properties.review = reviewSchema;
        masterSchema.required.push('review');
    }

    if (tasks.shortVideo) {
        prompt += `
    **2. K·ªäCH B·∫¢N VIDEO NG·∫ÆN (TIKTOK/SHORTS - D∆∞·ªõi 60 gi√¢y):**
        - **Y√™u c·∫ßu:** Vi·∫øt m·ªôt k·ªãch b·∫£n video ng·∫Øn, nhanh, h·∫•p d·∫´n.
        - **C·∫•u tr√∫c:**
            - **Hook (3s ƒë·∫ßu):** M·ªôt c√¢u m·ªü ƒë·∫ßu c·ª±c s·ªëc ho·∫∑c g√¢y t√≤ m√≤.
            - **Scenes (3-5 c·∫£nh):** M·ªói c·∫£nh m√¥ t·∫£ ng·∫Øn g·ªçn (1) G·ª£i √Ω h√¨nh ·∫£nh/video, (2) L·ªùi tho·∫°i ho·∫∑c text tr√™n m√†n h√¨nh. T·∫≠p trung v√†o 1-2 √Ω ƒë·∫Øt gi√° nh·∫•t c·ªßa t√°c ph·∫©m.
            - **CTA:** L·ªùi k√™u g·ªçi h√†nh ƒë·ªông m·∫°nh m·∫Ω (VD: "T√¨m ƒë·ªçc ngay ƒë·ªÉ thay ƒë·ªïi t∆∞ duy!" ho·∫∑c "Comment √Ω t∆∞·ªüng b·∫°n th√≠ch nh·∫•t!").
    `;
        masterSchema.properties.shortVideoScript = shortVideoScriptSchema;
        masterSchema.required.push('shortVideoScript');
    }

    if (tasks.longVideo) {
        prompt += `
    **3. K·ªäCH B·∫¢N VIDEO D√ÄI (YOUTUBE - 10-15 ph√∫t):**
        - **Y√™u c·∫ßu:** Vi·∫øt m·ªôt k·ªãch b·∫£n chi ti·∫øt v·ªõi gi·ªçng vƒÉn k·ªÉ chuy·ªán, truy·ªÅn c·∫£m h·ª©ng.
        - **C·∫•u tr√∫c:**
            - **Title:** Ti√™u ƒë·ªÅ video h·∫•p d·∫´n, chu·∫©n SEO.
            - **Intro:** ƒêo·∫°n m·ªü ƒë·∫ßu gi·ªõi thi·ªáu t√°c ph·∫©m, n√™u v·∫•n ƒë·ªÅ v√† h·ª©a h·∫πn gi·∫£i ph√°p m√† t√°c ph·∫©m mang l·∫°i.
            - **Body:** T√≥m t·∫Øt v√† ph√¢n t√≠ch s√¢u c√°c ch∆∞∆°ng ho·∫∑c c√°c √Ω t∆∞·ªüng ch√≠nh c·ªßa t√°c ph·∫©m m·ªôt c√°ch logic, d·ªÖ hi·ªÉu.
            - **Outro:** T·ªïng k·∫øt l·∫°i gi√° tr·ªã c·ªët l√µi, ƒë∆∞a ra l·ªùi khuy√™n v√† k√™u g·ªçi kh√°n gi·∫£ like, share, subscribe v√† ƒë·ªçc/xem t√°c ph·∫©m.
    `;
        masterSchema.properties.longVideoScript = longVideoScriptSchema;
        masterSchema.required.push('longVideoScript');
    }
    
    prompt += `\n**Output:** Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t theo schema ƒë√£ ƒë·ªãnh nghƒ©a.`;


    const parts: Part[] = [{ text: prompt }];
    if (coverImage) {
        parts.push({
            inlineData: {
                mimeType: coverImage.mimeType,
                data: coverImage.data,
            },
        });
    }

    const requestConfig = {
      responseMimeType: "application/json",
      responseSchema: masterSchema,
    };

    try {
        const response: GenerateContentResponse = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: { parts: parts },
            config: requestConfig,
        });

        const jsonStr = response.text.trim();
        const parsedJson = JSON.parse(jsonStr);
        
        parsedJson.downloadLink = ebookLink;
        parsedJson.purchaseLink = affiliateLink;

        return parsedJson as MultiPlatformContent;

    } catch (error) {
        console.error("L·ªói khi g·ªçi Gemini API:", error);
        if (error instanceof Error) {
            throw new Error(`L·ªói t·ª´ Gemini API: ${error.message}`);
        }
        throw new Error("M·ªôt l·ªói kh√¥ng x√°c ƒë·ªãnh ƒë√£ x·∫£y ra khi t·∫°o n·ªôi dung.");
    }
};